{"version":3,"sources":["data/DataLoader.ts","pages/Standings.tsx","util.ts","pages/User.tsx","ScrollToTop.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["load2019","data2019","standings","sort","a","b","point","ranks","forEach","e","i","push","history","useHistory","Container","fluid","style","backgroundImage","Row","Col","sm","map","user","onClick","pathname","id","key","className","backgroundColor","xs","lg","fontWeight","fontSize","textAlign","display","color","width","src","user_info","image_url","alt","textShadow","country","Math","round","formatRank","rank","last","second","floor","GP30","earnedPoint","undefined","userId","useParams","data","find","d","to","filter","length","countryRank","contests","CONTEST2019","results","Object","entries","result","contestId","contestRank","contest","c","earned","writer","date","localeCompare","r","md","href","title","Button","ScrollToTop","useLocation","useEffect","window","scrollTo","App","Navbar","dark","NavbarBrand","path","component","Standings","User","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3147b0b9.chunk.js","sourcesContent":["import data2019 from \"./2019/result.json\";\nimport CONTEST2019 from \"./2019/contests.json\";\n\nexport const load2019 = () => {\n  return data2019;\n};\n\nexport const contest2019 = () => {\n  return CONTEST2019;\n};\n","import React from \"react\";\nimport { Col, Container, Row } from \"reactstrap\";\nimport { load2019 } from \"../data/DataLoader\";\nimport { useHistory } from \"react-router-dom\";\n\nexport default () => {\n  const standings = load2019().sort((a, b) => b.point - a.point);\n  const ranks: Array<number> = [];\n  standings.forEach((e, i) => {\n    if (i > 0 && standings[i - 1].point === standings[i].point) {\n      ranks.push(ranks[i - 1]);\n    } else {\n      ranks.push(i + 1);\n    }\n  });\n\n  const history = useHistory();\n\n  return (\n    <Container\n      fluid\n      style={{\n        backgroundImage:\n          \"url('https://cdn.pixabay.com/photo/2017/08/24/03/41/milky-way-2675322_960_720.jpg')\"\n      }}\n    >\n      <Container>\n        <Row>\n          <Col sm=\"12\">\n            {standings.map((user, i) => (\n              <Row\n                onClick={() => {\n                  history.push({ pathname: `/user/${user.id}` });\n                }}\n                key={user.id}\n                className=\"align-items-center py-2 my-2 rounded-lg\"\n                style={{\n                  backgroundColor: \"rgba(128, 128, 128, 0.7)\"\n                }}\n              >\n                <Col\n                  xs=\"2\"\n                  lg=\"2\"\n                  className=\"align-self-center\"\n                  style={{\n                    fontWeight: \"bold\",\n                    fontSize: \"x-large\",\n                    textAlign: \"center\"\n                  }}\n                >\n                  <p\n                    style={{\n                      display: \"inline\",\n                      color: ranks[i] <= 8 ? \"gold\" : \"white\"\n                    }}\n                  >\n                    {ranks[i]}\n                  </p>\n                </Col>\n                <Col xs=\"1\" lg=\"1\">\n                  <img\n                    width=\"100%\"\n                    src={user.user_info.image_url}\n                    className=\"rounded-circle\"\n                    alt={user.id}\n                  />\n                </Col>\n                <Col xs=\"6\" lg=\"7\" className=\"align-self-center\">\n                  <Row\n                    style={{\n                      fontWeight: \"bold\",\n                      fontSize: \"xx-large\",\n                      color: \"white\",\n                      textShadow: \"0px 0px 6px #000\"\n                    }}\n                  >\n                    {user.id}\n                  </Row>\n                  <Row\n                    style={{\n                      fontSize: \"large\",\n                      color: \"LightGray\"\n                    }}\n                  >\n                    {user.user_info.country}\n                  </Row>\n                </Col>\n\n                <Col\n                  xs=\"2\"\n                  className=\"align-self-center\"\n                  style={{\n                    fontWeight: \"bold\",\n                    color: \"white\",\n                    textShadow: \"0px 0px 6px #000\"\n                  }}\n                >\n                  <Row>Point</Row>\n                  <Row style={{ fontSize: \"x-large\" }}>\n                    {Math.round(user.point * 10) / 10}\n                  </Row>\n                </Col>\n              </Row>\n            ))}\n          </Col>\n        </Row>\n      </Container>\n    </Container>\n  );\n};\n","export const formatRank = (rank: number) => {\n  const last = rank % 10;\n  const second = Math.floor(rank / 10) % 10;\n  if (second === 1) {\n    return `${rank}th`;\n  } else if (last === 1) {\n    return `${rank}st`;\n  } else if (last === 2) {\n    return `${rank}nd`;\n  } else if (last === 3) {\n    return `${rank}rd`;\n  } else {\n    return `${rank}th`;\n  }\n};\n\nconst GP30 = [\n  100,\n  75,\n  60,\n  50,\n  45,\n  40,\n  36,\n  32,\n  29,\n  26,\n  24,\n  22,\n  20,\n  18,\n  16,\n  15,\n  14,\n  13,\n  12,\n  11,\n  10,\n  9,\n  8,\n  7,\n  6,\n  5,\n  4,\n  3,\n  2,\n  1\n];\nexport const earnedPoint = (rank: number) =>\n  rank <= 30 ? GP30[rank - 1] : undefined;\n","import { Button, Col, Container, Row } from \"reactstrap\";\nimport React from \"react\";\nimport { useParams, Redirect } from \"react-router-dom\";\nimport { contest2019, load2019 } from \"../data/DataLoader\";\nimport { earnedPoint, formatRank } from \"../util\";\nexport default () => {\n  const { userId } = useParams();\n  const data = load2019();\n  const user = data.find(d => d.id === userId);\n  if (!user) {\n    return <Redirect to=\"/\" />;\n  }\n  const rank = data.filter(d => d.point > user.point).length + 1;\n  const countryRank =\n    data.filter(\n      d =>\n        d.point > user.point && d.user_info.country === user.user_info.country\n    ).length + 1;\n\n  const contests = contest2019();\n  const results: {\n    contest: { id: string; title: string; date: string; writers: string[] };\n    contestRank: string;\n    earned: number | undefined;\n  }[] = [];\n  Object.entries(user.result).forEach(([contestId, contestRank]) => {\n    const contest = contests.find(c => c.id === contestId);\n    if (contestRank && contest) {\n      results.push({\n        contest,\n        contestRank: formatRank(contestRank),\n        earned: earnedPoint(contestRank)\n      });\n    }\n  });\n  user.writer.forEach(contestId => {\n    const contest = contests.find(c => c.id === contestId);\n    if (contest) {\n      results.push({\n        contest,\n        contestRank: \"Writer\",\n        earned: undefined\n      });\n    }\n  });\n  results.sort((a, b) => b.contest.date.localeCompare(a.contest.date));\n\n  return (\n    <Container fluid style={{ backgroundColor: \"white\" }}>\n      <Row\n        style={{\n          backgroundImage:\n            \"url('https://cdn.pixabay.com/photo/2017/08/24/03/41/milky-way-2675322_960_720.jpg')\",\n          color: \"white\",\n          textShadow: \"0px 0px 6px #000\"\n        }}\n      >\n        <Container>\n          <Row className=\"py-4\">\n            <Col sm=\"3\" xs=\"1\">\n              <img\n                width=\"100%\"\n                src={user.user_info.image_url}\n                className=\"rounded-circle\"\n                alt={user.id}\n              />\n            </Col>\n            <Col sm=\"9\" xs=\"12\">\n              <Row>\n                <h1 className=\"display-1\" style={{ fontWeight: \"bold\" }}>\n                  {user.id}\n                </h1>\n              </Row>\n              <Row>\n                <h2>{user.user_info.country}</h2>\n              </Row>\n              <Row>\n                <h2>{Math.round(user.point * 10) / 10} pt</h2>\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n      </Row>\n      <Row>\n        <Container>\n          <Row className=\"py-2\">\n            <h1>Ranks</h1>\n          </Row>\n          <Row>\n            <Col sm=\"3\" className=\"px-0\">\n              <h2>Global {formatRank(rank)}</h2>\n            </Col>\n            <Col sm=\"9\">\n              <h2>\n                {user.user_info.country} {formatRank(countryRank)}\n              </h2>\n            </Col>\n          </Row>\n          <Row className=\"py-2 mt-4\">\n            <h1>Season Overview</h1>\n          </Row>\n          {results.map(r => (\n            <Row key={r.contest.id} className=\"mb-4\">\n              <Col sm=\"2\" className=\"px-0\">\n                <h2>{r.contestRank}</h2>\n              </Col>\n              <Col sm=\"5\" md=\"9\">\n                <Row>\n                  <h3>\n                    <a href={`https://atcoder.jp/contests/${r.contest.id}/`}>\n                      {r.contest.title}\n                    </a>\n                  </h3>\n                </Row>\n                <Row style={{ color: \"gray\" }}>\n                  <h5>\n                    <span style={{ fontWeight: \"bold\" }}>Date:</span>{\" \"}\n                    {r.contest.date}\n                  </h5>\n                </Row>\n                {r.earned ? (\n                  <Row style={{ color: \"gray\" }}>\n                    <h5>\n                      <span style={{ fontWeight: \"bold\" }}>Point Earned:</span>{\" \"}\n                      {r.earned}\n                    </h5>\n                  </Row>\n                ) : null}\n                <Row>\n                  <a\n                    href={`https://atcoder.jp/contests/${r.contest.id}/standings`}\n                  >\n                    <Button>View Results</Button>\n                  </a>\n                </Row>\n              </Col>\n            </Row>\n          ))}\n        </Container>\n      </Row>\n    </Container>\n  );\n};\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport Standings from \"./pages/Standings\";\nimport { Navbar, NavbarBrand } from \"reactstrap\";\nimport User from \"./pages/User\";\nimport ScrollToTop from \"./ScrollToTop\";\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Navbar color=\"dark\" dark>\n        <NavbarBrand href=\"/#/\">AtCoder World Tour [unofficial]</NavbarBrand>\n      </Navbar>\n\n      <HashRouter>\n        <ScrollToTop />\n        <Switch>\n          <Route path=\"/standings\" component={Standings} />\n          <Route path=\"/user/:userId([0-9a-zA-Z\\-_]+)\" component={User} />\n          <Redirect path=\"/\" to=\"/standings\" />\n        </Switch>\n      </HashRouter>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}